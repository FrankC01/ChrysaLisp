(include "sys/func.inc")
(include "class/hmap/class.inc")
(include "class/lisp/class.inc")

(def-method 'lisp :env_pop)
	;inputs
	;r0 = lisp object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = hmap object (ptr)
	;trashes
	;r1-r14

	(def-struct local 0
		(ptr this new_env))

	(vp-alloc local_size)
	(entry 'lisp :env_pop '(r0))

	(assign '(r0 (r0 lisp_environment)) '((rsp local_this) r0))
	(assign '((r0 hmap_parent)) '(r1))
	(assign '(r1) '((rsp local_new_env)))
	(class/obj/ref r1 r2)
	(call 'obj :deref '(r0))
	(assign '((rsp local_this) (rsp local_new_env)) '(r0 r1))
	(assign '(r1) '((r0 lisp_environment)))

	(exit 'lisp :env_pop '(r0 r1))
	(vp-free local_size)
	(vp-ret)

(def-func-end)

(def-method 'lisp :lisp_env_pop)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args list object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)
	;trashes
	;r1-r14

	(entry 'lisp :lisp_env_pop '(r0 r1))

(errorcases
	(assign '((r1 array_length)) '(r2))
	(gotoif '(r2 /= 0) 'error))

	(call 'lisp :env_pop '(r0) '(r0 r1))
	(class/obj/ref r1 r2)

	(exit 'lisp :lisp_env_pop '(r0 r1))
	(vp-ret)

(errorcases
(vp-label 'error)
	(jump 'lisp :repl_error '(r0 "(env-pop)" error_msg_wrong_num_of_args r1)))

(def-func-end)
