(include "sys/func.inc")
(include "class/lisp/class.inc")

(def-method 'lisp :lisp_if)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args list object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)
	;trashes
	;r1-r14

	(entry 'lisp :lisp_if '(r0 r1))

	(assign '((r1 array_length)) '(r2))
(errorcases
	(gotoif '(r2 < 3) 'error)
	(gotoif '(r2 > 4) 'error))

	(assign '((r1 array_begin)) '(r1))
	(vp-push r0 r1 r2)

	(call 'lisp :repl_eval '(r0 (r1 +ptr_size)) '(r0 r1))
(errorcases
	(assign `((r1 obj_vtable) (@ ,(f-path 'error :vtable))) '(r2 r3))
	(gotoif '(r2 = r3) 'error1))

	(assign '((r0 lisp_sym_nil)) '(r2))
	(vpif '(r1 /= r2))
		(call 'obj :deref '(r1))
		(vp-pop r0 r1 r2)
		(jump 'lisp :repl_eval '(r0 (r1 (* 2 +ptr_size))))
	(endif)
	(assign '((rsp 0)) '(r2))
	(vpif '(r2 = 4))
		(call 'obj :deref '(r1))
		(vp-pop r0 r1 r2)
		(jump 'lisp :repl_eval '(r0 (r1 (* 3 +ptr_size))))
	(endif)
	(vp-pop r0 r2 r3)

	(exit 'lisp :lisp_if '(r0 r1))
	(vp-ret)

(vp-label 'error1)
	(vp-free (* 3 +ptr_size))
	(exit 'lisp :lisp_if '(r0 r1))
	(vp-ret)

(errorcases
(vp-label 'error)
	(jump 'lisp :repl_error '(r0 "(if tst form [else_form])" error_msg_wrong_num_of_args r1)))

(def-func-end)
