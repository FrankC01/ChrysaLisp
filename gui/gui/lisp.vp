(include "sys/func.inc")
(include "sys/load/class.inc")
(include "gui/gui/class.inc")
(include "gui/view/class.inc")
(include "class/num/class.inc")
(include "class/lisp/class.inc")
(include "sys/statics/class.inc")

(def-method 'gui :lisp_add)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args list object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)
	;trashes
	;r1-r14

	(entry 'gui :lisp_add '(r0 r1))

(errorcases
	(call 'lisp :env_args_sig '(r1 ($ sig) 1) '(r2))
	(gotoif '(r2 = 0) 'error1))

	(vp-push r0)
	(list-bind-args r1 '(r0) '(:view))
	(vp-push r0)
	(fn-bind 'sys/statics/statics r2)
	(call 'view :add_front '((r2 statics_gui_screen) r0))
	(call 'sys_task :mailbox nil '(r1 r2 r3))
	(vp-pop r0)
	(save-net-id r0 view_owner_id r1 r2 r3)
	(call 'view :set_flags '(r0 view_flag_dirty_all view_flag_dirty_all) '(r1 _))
	(class/obj/ref r1 r2 2)
	(vp-pop r0)

	(exit 'gui :lisp_add '(r0 r1))
	(vp-ret)

(errorcases
(vp-label 'error1)
	(jump 'lisp :repl_error '(r0 "(gui-add view)" error_msg_wrong_types r1))
	(signature '(view)))

(def-func-end)

(def-method 'gui :lisp_add_back)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args list object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)
	;trashes
	;r1-r14

	(entry 'gui :lisp_add_back '(r0 r1))

(errorcases
	(call 'lisp :env_args_sig '(r1 ($ sig) 1) '(r2))
	(gotoif '(r2 = 0) 'error1))

	(vp-push r0)
	(list-bind-args r1 '(r0) '(:view))
	(vp-push r0)
	(fn-bind 'sys/statics/statics r2)
	(call 'view :add_back '((r2 statics_gui_screen) r0))
	(call 'sys_task :mailbox nil '(r1 r2 r3))
	(vp-pop r0)
	(save-net-id r0 view_owner_id r1 r2 r3)
	(call 'view :set_flags '(r0 view_flag_dirty_all view_flag_dirty_all) '(r1 _))
	(class/obj/ref r1 r2 2)
	(vp-pop r0)

	(exit 'gui :lisp_add_back '(r0 r1))
	(vp-ret)

(errorcases
(vp-label 'error1)
	(jump 'lisp :repl_error '(r0 "(gui-add-back view)" error_msg_wrong_types r1))
	(signature '(view)))

(def-func-end)

(def-method 'gui :lisp_info)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args list object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)
	;trashes
	;r1-r14

	(entry 'gui :lisp_info '(r0 r1))

(errorcases
	(assign '((r1 array_length)) '(r2))
	(gotoif '(r2 /= 0) 'error))

	(vp-push r0)
	(fn-bind 'sys/statics/statics r1)
	(assign '((r1 statics_sys_load_host_gui_funcs)) '(r1))
	(vpif '(r1 /= 0))
		;we are GUI caperble
		(fn-bind 'sys/statics/statics r1)
		(assign '((r1 statics_gui_screen)) '(r1))
		(assign '(0 0 0 0) '(r7 r8 r9 r10))
		(vpif '(r1 /= 0))
			;have screen
			(call 'view :get_bounds '(r1) '(r0 _ _ r9 r10))
			(fn-bind 'sys/statics/statics r0)
			(assign '((r0 statics_gui_mouse_x) (r0 statics_gui_mouse_y)) '(r7 r8))
		(endif)
		(call 'list :create nil '(r11))
		(call 'num :create '(r7) '(r7))
		(call 'num :create '(r8) '(r8))
		(call 'num :create '(r9) '(r9))
		(call 'num :create '(r10) '(r10))
		(call 'list :push_back2 '(r11 r7 r8) '(r0 _ _ _ _))
		(call 'list :push_back2 '(r0 r9 r10) '(r1 _ _ _ _))
	(else)
		(call 'obj :ref '((r0 lisp_sym_nil)) '(r1))
	(endif)
	(vp-pop r0)

	(exit 'gui :lisp_info '(r0 r1))
	(vp-ret)

(errorcases
(vp-label 'error)
	(jump 'lisp :repl_error '(r0 "(gui-info)" error_msg_wrong_types r1)))

(def-func-end)
