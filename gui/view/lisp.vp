(include "sys/func.inc")
(include "gui/view/class.inc")
(include "gui/region/class.inc")
(include "gui/gui/class.inc")
(include "class/num/class.inc")
(include "class/str/class.inc")
(include "class/lisp/class.inc")
(include "sys/statics/class.inc")

(def-method 'view :lisp_create)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args list object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)
	;trashes
	;r1-r14

	(entry 'view :lisp_create '(r0 r1))

(errorcases
	(assign '((r1 array_length)) '(r2))
	(gotoif '(r2 /= 0) 'error))

	(vp-push r0)
	(call 'view :create nil '(r1))
	(vp-pop r0)

	(exit 'view :lisp_create '(r0 r1))
	(vp-ret)

(errorcases
(vp-label 'error)
	(jump 'lisp :repl_error '(r0 "(create-view)" error_msg_wrong_num_of_args r1)))

(def-func-end)

(def-method 'view :lisp_find_id)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args list object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)
	;trashes
	;r1-r14

	(entry 'view :lisp_find_id '(r0 r1))

(errorcases
	(call 'lisp :env_args_sig '(r1 ($ sig) 2) '(r2))
	(gotoif '(r2 = 0) 'error))

	(vp-push r0)
	(defq in (method-input 'view :find_id))
	(list-bind-args r1 in '(:view :num))
	(call 'view :find_id in '(_ r0))
	(vpif '(r0 = 0))
		(assign '((rsp 0)) '(r0))
		(assign '((r0 lisp_sym_nil)) '(r0))
	(endif)
	(call 'obj :ref '(r0) '(r1))
	(vp-pop r0)

	(exit 'view :lisp_find_id '(r0 r1))
	(vp-ret)

(errorcases
(vp-label 'error)
	(jump 'lisp :repl_error '(r0 "(view-find-id view id)" error_msg_wrong_types r1))
	(signature '(view num)))

(def-func-end)

(def-method 'view :lisp_sub)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args list object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)
	;trashes
	;r1-r14

	(entry 'view :lisp_sub '(r0 r1))

(errorcases
	(call 'lisp :env_args_sig '(r1 ($ sig) 1) '(r2))
	(gotoif '(r2 = 0) 'error))

	(vp-push r0)
	(array-bind-args r1 '(r0))
	(call 'view :sub '(r0) '(r1))
	(vp-pop r0)

	(exit 'view :lisp_sub '(r0 r1))
	(vp-ret)

(errorcases
(vp-label 'error)
	(jump 'lisp :repl_error '(r0 "(view-sub view)" error_msg_wrong_types r1))
	(signature '(view)))

(def-func-end)

(def-method 'view :lisp_hide)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args list object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)
	;trashes
	;r1-r14

	(entry 'view :lisp_hide '(r0 r1))

(errorcases
	(call 'lisp :env_args_sig '(r1 ($ sig) 1) '(r2))
	(gotoif '(r2 = 0) 'error))

	(vp-push r0)
	(array-bind-args r1 '(r0))
	(call 'view :hide '(r0) '(r1))
	(vp-pop r0)

	(exit 'view :lisp_hide '(r0 r1))
	(vp-ret)

(errorcases
(vp-label 'error)
	(jump 'lisp :repl_error '(r0 "(. view :hide)" error_msg_wrong_types r1))
	(signature '(view)))

(def-func-end)

(def-method 'view :lisp_add)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args list object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)
	;trashes
	;r1-r14

	(entry 'view :lisp_add '(r0 r1))

(errorcases
	(call 'lisp :env_args_sig '(r1 ($ sig) 2) '(r2))
	(gotoif '(r2 = 0) 'error))

	(vp-push r0)
	(array-bind-args r1 '(r0 r1))
	(class/obj/ref r0 r2)
	(class/obj/ref r1 r2)
	(call 'view :add_front '(r0 r1) '(r1))
	(vp-pop r0)

	(exit 'view :lisp_add '(r0 r1))
	(vp-ret)

(errorcases
(vp-label 'error)
	(jump 'lisp :repl_error '(r0 "(view-add-front parent child)" error_msg_wrong_types r1))
	(signature '(view view)))

(def-func-end)

(def-method 'view :lisp_add_back)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args list object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)
	;trashes
	;r1-r14

	(entry 'view :lisp_add_back '(r0 r1))

(errorcases
	(call 'lisp :env_args_sig '(r1 ($ sig) 2) '(r2))
	(gotoif '(r2 = 0) 'error))

	(vp-push r0)
	(array-bind-args r1 '(r0 r1))
	(class/obj/ref r0 r2)
	(class/obj/ref r1 r2)
	(call 'view :add_back '(r0 r1) '(r1))
	(vp-pop r0)

	(exit 'view :lisp_add_back '(r0 r1))
	(vp-ret)

(errorcases
(vp-label 'error)
	(jump 'lisp :repl_error '(r0 "(view-add-back parent child)" error_msg_wrong_types r1))
	(signature '(view view)))

(def-func-end)

(def-method 'view :lisp_trans_dirty)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args list object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)
	;trashes
	;r1-r14

	(entry 'view :lisp_trans_dirty '(r0 r1))

(errorcases
	(call 'lisp :env_args_sig '(r1 ($ sig) 3) '(r2))
	(gotoif '(r2 = 0) 'error))

	(defq in (method-input 'region :translate))
	(list-bind-args r1 in '(:view :num :num))
	(vp-push r0 (elem 0 in))
	(vp-lea-i (elem 0 in) view_dirty_region (elem 0 in))
	(call 'region :translate in)
	(vp-pop r0 r1)
	(class/obj/ref r1 r2)

	(exit 'view :lisp_trans_dirty '(r0 r1))
	(vp-ret)

(errorcases
(vp-label 'error)
	(jump 'lisp :repl_error '(r0 "(view-trans-dirty view rx ry)" error_msg_wrong_types r1))
	(signature '(view num num)))

(def-func-end)

(def-method 'view :lisp_clr_opaque)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args list object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)
	;trashes
	;r1-r14

	(entry 'view :lisp_clr_opaque '(r0 r1))

(errorcases
	(call 'lisp :env_args_sig '(r1 ($ sig) 1) '(r2))
	(gotoif '(r2 = 0) 'error))

	;remove any opaque region
	(vp-push r0)
	(defq in (method-input 'region :free))
	(list-bind-args r1 in '(_ :view))
	(vp-push (elem 1 in))
	(fn-bind 'sys/statics/statics (elem 0 in))
	(vp-add-cr view_opaque_region (elem 1 in))
	(vp-add-cr statics_gui_rect_heap (elem 0 in))
	(call 'region :free in)
	(vp-pop r1)
	(class/obj/ref r1 r2)
	(vp-pop r0)

	(exit 'view :lisp_clr_opaque '(r0 r1))
	(vp-ret)

(errorcases
(vp-label 'error)
	(jump 'lisp :repl_error '(r0 "(view-clr-opaque view)" error_msg_wrong_types r1))
	(signature '(view)))

(def-func-end)

(def-method 'view :lisp_add_opaque)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args list object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)
	;trashes
	;r1-r14

	(entry 'view :lisp_add_opaque '(r0 r1))

(errorcases
	(call 'lisp :env_args_sig '(r1 ($ sig) 5) '(r2))
	(gotoif '(r2 = 0) 'error))

	;paste opaque region
	(vp-push r0)
	(defq in (method-input 'region :paste_rect))
	(list-bind-args r1 in '(_ :view :num :num :num :num))
	(vp-push (elem 1 in))
	(fn-bind 'sys/statics/statics (elem 0 in))
	(vp-add-rr (elem 2 in) (elem 4 in))
	(vp-add-rr (elem 3 in) (elem 5 in))
	(vp-add-cr view_opaque_region (elem 1 in))
	(vp-add-cr statics_gui_rect_heap (elem 0 in))
	(call 'region :paste_rect in)
	(vp-pop r1)
	(class/obj/ref r1 r2)
	(vp-pop r0)

	(exit 'view :lisp_add_opaque '(r0 r1))
	(vp-ret)

(errorcases
(vp-label 'error)
	(jump 'lisp :repl_error '(r0 "(view-add-opaque view x y w h)" error_msg_wrong_types r1))
	(signature '(view num num num num)))

(def-func-end)

(def-method 'view :lisp_sub_opaque)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args list object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)
	;trashes
	;r1-r14

	(entry 'view :lisp_sub_opaque '(r0 r1))

(errorcases
	(call 'lisp :env_args_sig '(r1 ($ sig) 5) '(r2))
	(gotoif '(r2 = 0) 'error))

	;remove opaque region
	(vp-push r0)
	(defq in (method-input 'region :remove_rect))
	(list-bind-args r1 in '(_ :view :num :num :num :num))
	(vp-push (elem 1 in))
	(fn-bind 'sys/statics/statics (elem 0 in))
	(vp-add-rr (elem 2 in) (elem 4 in))
	(vp-add-rr (elem 3 in) (elem 5 in))
	(vp-add-cr view_opaque_region (elem 1 in))
	(vp-add-cr statics_gui_rect_heap (elem 0 in))
	(call 'region :remove_rect in)
	(vp-pop r1)
	(class/obj/ref r1 r2)
	(vp-pop r0)

	(exit 'view :lisp_sub_opaque '(r0 r1))
	(vp-ret)

(errorcases
(vp-label 'error)
	(jump 'lisp :repl_error '(r0 "(view-sub-opaque view x y w h)" error_msg_wrong_types r1))
	(signature '(view num num num num)))

(def-func-end)

(def-method 'view :lisp_set_flags)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args list object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)
	;trashes
	;r1-r14

	(entry 'view :lisp_set_flags '(r0 r1))

(errorcases
	(call 'lisp :env_args_sig '(r1 ($ sig) 3) '(r2))
	(gotoif '(r2 = 0) 'error))

	(vp-push r0)
	(defq in (method-input 'view :set_flags))
	(list-bind-args r1 in '(:view :num :num))
	(call 'view :set_flags in '(r0 _))
	(call 'view :ref '(r0) '(r1))
	(vp-pop r0)

	(exit 'view :lisp_set_flags '(r0 r1))
	(vp-ret)

(errorcases
(vp-label 'error)
	(jump 'lisp :repl_error '(r0 "(view-set-flags view flags mask)" error_msg_wrong_types r1))
	(signature '(view num num)))

(def-func-end)

(def-method 'view :lisp_add_dirty)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args list object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)
	;trashes
	;r1-r14

	(entry 'view :lisp_add_dirty '(r0 r1))

(errorcases
	(call 'lisp :env_args_sig '(r1 ($ sig) 5) '(r2))
	(gotoif '(r2 = 0) 'error))

	;paste dirty region
	(vp-push r0)
	(defq in (method-input 'region :paste_rect))
	(list-bind-args r1 in '(_ :view :num :num :num :num))
	(vp-push (elem 1 in))
	(fn-bind 'sys/statics/statics (elem 0 in))
	(vp-cpy-cr 1 r14)
	(vp-add-rr (elem 2 in) (elem 4 in))
	(vp-add-rr (elem 3 in) (elem 5 in))
	(vp-add-cr view_dirty_region (elem 1 in))
	(assign '(r14) `((,(elem 0 in) statics_gui_dirty_flag)))
	(vp-add-cr statics_gui_rect_heap (elem 0 in))
	(call 'region :paste_rect in)
	(vp-pop r1)
	(class/obj/ref r1 r2)
	(vp-pop r0)

	(exit 'view :lisp_add_dirty '(r0 r1))
	(vp-ret)

(errorcases
(vp-label 'error)
	(jump 'lisp :repl_error '(r0 "(view-add-dirty view x y w h)" error_msg_wrong_types r1))
	(signature '(view num num num num)))

(def-func-end)

(def-method 'view :lisp_children)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args list object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)
	;trashes
	;r1-r14

	(vp-def (this node next) '(r13 r12 r11))

	(entry 'view :lisp_children '(r0 r1))

(errorcases
	(call 'lisp :env_args_sig '(r1 ($ sig) 1) '(r2))
	(gotoif '(r2 = 0) 'error))

	(assign '(r0) `(,this))
	(list-bind-args r1 `(,node) '(:view))
	(call 'list :create nil '(r0))
	(lh-get-head node view_list node)
	(loop-start)
		(ln-get-succ node 0 next)
		(breakif '(next = 0))
		;push ref
		(vp-sub-cr view_node node)
		(class/obj/ref node r1)
		(call 'list :push_back `(r0 ,node) '(r0 r1 _ _))
		;across to sibling
		(ln-get-succ r1 view_node node)
	(loop-end)

	(exit 'view :lisp_children `(,this r0))
	(vp-ret)

(errorcases
(vp-label 'error)
	(jump 'lisp :repl_error '(r0 "(view-children view)" error_msg_wrong_types r1))
	(signature '(view)))

(def-func-end)

(def-method 'view :lisp_to_front)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args list object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)
	;trashes
	;r1-r14

	(entry 'view :lisp_to_front '(r0 r1))

(errorcases
	(call 'lisp :env_args_sig '(r1 ($ sig) 1) '(r2))
	(gotoif '(r2 = 0) 'error))

	(vp-push r0)
	(defq in (method-input 'view :to_front))
	(list-bind-args r1 in '(:view))
	(call 'view :to_front in '(r0))
	(call 'obj :ref '(r0) '(r1))
	(vp-pop r0)

	(exit 'view :lisp_to_front '(r0 r1))
	(vp-ret)

(errorcases
(vp-label 'error)
	(jump 'lisp :repl_error '(r0 "(view-to-front view)" error_msg_wrong_types r1))
	(signature '(view)))

(def-func-end)

(def-method 'view :lisp_to_back)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args list object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)
	;trashes
	;r1-r14

	(entry 'view :lisp_to_back '(r0 r1))

(errorcases
	(call 'lisp :env_args_sig '(r1 ($ sig) 1) '(r2))
	(gotoif '(r2 = 0) 'error))

	(vp-push r0)
	(defq in (method-input 'view :to_back))
	(list-bind-args r1 in '(:view))
	(call 'view :to_back in '(r0))
	(call 'obj :ref '(r0) '(r1))
	(vp-pop r0)

	(exit 'view :lisp_to_back '(r0 r1))
	(vp-ret)

(errorcases
(vp-label 'error)
	(jump 'lisp :repl_error '(r0 "(view-to-back view)" error_msg_wrong_types r1))
	(signature '(view)))

(def-func-end)

(def-method 'view :lisp_emit)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args list object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)
	;trashes
	;r1-r14

	(ptr 'this 'args 'msg 'data)
	(plong 'iter_begin 'iter_end)
	(struct 'owner_id 'net_id)

	(push-scope)
	(entry 'view :lisp_emit {this, args})

(errorcases
	(call 'lisp :env_args_sig {args, $sig, 1} '(r2))
	(gotoif '(r2 = 0) 'error))

	(switch)
	(call 'list :ref_element {args, 0} {_, args})
	(breakifnot {args->view_target_ids})
	(call 'view :find_owner {args}
		{_, owner_id.net_id_mbox_id,
		owner_id.net_id_node_id.node_id_node1,
		owner_id.net_id_node_id.node_id_node2})
	(breakifnot {owner_id.net_id_mbox_id
		| owner_id.net_id_node_id.node_id_node1
		| owner_id.net_id_node_id.node_id_node2})
	(call 'array :get_both {args->view_target_ids} {_, iter_begin, iter_end})
	(loop-while {iter_begin /= iter_end})
		(call 'sys_mail :alloc {ev_msg_action_size} {msg, data})
		(assign {owner_id.net_id_mbox_id} {msg->msg_dest.net_id_mbox_id})
		(assign {owner_id.net_id_node_id.node_id_node1} {msg->msg_dest.net_id_node_id.node_id_node1})
		(assign {owner_id.net_id_node_id.node_id_node2} {msg->msg_dest.net_id_node_id.node_id_node2})
		(assign {ev_type_action} {data->ev_msg_type})
		(assign {*iter_begin} {data->ev_msg_target_id})
		(assign {args->view_id} {data->ev_msg_action_source_id})
		(call 'sys_mail :send {msg})
		(assign {iter_begin + +long_size+} {iter_begin})
	(loop-end)
	(endswitch)

	(exit 'view :lisp_emit {this, args})
	(return)

(errorcases
(vp-label 'error)
	(jump 'lisp :repl_error {this, "(view-emit view)", error_msg_wrong_types, args})
	(signature '(view)))

	(pop-scope-syms)

(def-func-end)
